#+TITLE: Notes
#+AUTHOR: Your Name
#+DATE: <2025-08-16 Fri>
#+OPTIONS: toc:nil num:nil html-style:nil
#+HTML_HEAD: <link rel="icon" type="image/png" href="../static/img/uh-logo.png" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../static/css/site.css" />
#+HTML_HEAD: <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
#+HTML_HEAD: <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mtml-chtml.js"></script>

* Note Test

This is a test note to demonstrate interactive mathematical content on the academic website.

** MathJax example

$$f(x,y) = (a-x)^2 + b(y-x^2)^2$$

Where $a = 1$ and $b = 100$ for the standard Rosenbrock function. The global minimum is at $(x,y) = (a,a^2) = (1,1)$ where $f(1,1) = 0$.

** 3D Rosenbrock Function Visualization

Below is an interactive 3D visualization of the famous Rosenbrock function, commonly used in optimization research:

#+BEGIN_SRC python :exports results :results output html
import plotly.graph_objects as go
import plotly.io as pio
import plotly.offline as pyo
import numpy as np

# Ensure proper HTML output
pio.renderers.default = 'browser'

# Create the Rosenbrock function: f(x,y) = (a-x)^2 + b(y-x^2)^2
# Standard parameters: a=1, b=100
def rosenbrock(x, y, a=1, b=100):
    return (a - x)**2 + b * (y - x**2)**2

# Create grid of x,y values
x = np.linspace(-2, 2, 50)
y = np.linspace(-1, 3, 50)
X, Y = np.meshgrid(x, y)

# Calculate the Rosenbrock function values
Z = rosenbrock(X, Y)

# Apply log transformation to better visualize the steep gradients
Z_log = np.log(Z + 1)  # Add 1 to avoid log(0)

# Create the figure
fig = go.Figure()

# Add the Rosenbrock surface
fig.add_trace(
    go.Surface(
        x=X,
        y=Y,
        z=Z_log,
        colorscale='Plasma',
        showscale=True,
        colorbar=dict(
            len=0.6,
            thickness=15,
            x=0.95,
            xanchor='left'
        ),
        name='log(Rosenbrock + 1)',
        hovertemplate='x: %{x:.2f}<br>y: %{y:.2f}<br>log(f+1): %{z:.2f}<extra></extra>'
    )
)

# Add the global minimum point at (1,1)
fig.add_trace(
    go.Scatter3d(
        x=[1],
        y=[1],
        z=[np.log(rosenbrock(1, 1) + 1)],
        mode='markers',
        marker=dict(size=10, color='red', symbol='diamond'),
        name='Global Minimum (1,1)'
    )
)

# Update layout
fig.update_layout(
    title="Rosenbrock Function: f(x,y) = (1-x)² + 100(y-x²)² (log scale)",
    scene=dict(
        xaxis_title='x',
        yaxis_title='y',
        zaxis_title='log(f(x,y) + 1)',
        aspectmode='manual',
        aspectratio=dict(x=1, y=1, z=0.7),
        camera=dict(
            eye=dict(x=1.5, y=1.5, z=1.2)
        )
    ),
    width=1000,
    height=700,
    legend=dict(
        x=0.02,
        y=0.98,
        bgcolor='rgba(255,255,255,0.8)',
        bordercolor='rgba(0,0,0,0.3)',
        borderwidth=1
    ),
    margin=dict(l=0, r=0, t=50, b=0)
)

# Generate HTML div with proper JavaScript inclusion
html_div = pyo.plot(fig, output_type='div', include_plotlyjs=True)
print(html_div)
#+END_SRC

---

/Published: August 16, 2025/
